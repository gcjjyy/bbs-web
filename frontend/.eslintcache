[{"/Users/gcjjyy/workspace/bbs-web/frontend/src/reportWebVitals.js":"1","/Users/gcjjyy/workspace/bbs-web/frontend/src/themes.js":"2","/Users/gcjjyy/workspace/bbs-web/frontend/src/App.js":"3","/Users/gcjjyy/workspace/bbs-web/frontend/src/index.js":"4","/Users/gcjjyy/workspace/bbs-web/frontend/src/LoadingModal.js":"5"},{"size":362,"mtime":1608390564323,"results":"6","hashOfConfig":"7"},{"size":980,"mtime":1608396966699,"results":"8","hashOfConfig":"7"},{"size":21553,"mtime":1608452077673,"results":"9","hashOfConfig":"7"},{"size":530,"mtime":1608447671967,"results":"10","hashOfConfig":"7"},{"size":380,"mtime":1608406585503,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f6zrka",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gcjjyy/workspace/bbs-web/frontend/src/reportWebVitals.js",[],"/Users/gcjjyy/workspace/bbs-web/frontend/src/themes.js",[],"/Users/gcjjyy/workspace/bbs-web/frontend/src/App.js",["23","24","25","26","27","28","29","30","31","32","33"],"import cookies from 'browser-cookies'\nimport copy from 'copy-to-clipboard'\nimport { useEffect, useRef, useState } from 'react'\nimport { Button, Nav, Navbar, NavDropdown } from 'react-bootstrap'\nimport io from 'socket.io-client'\nimport './App.css'\nimport LoadingModal from './LoadingModal'\nimport THEMES from './themes'\n\nconst debug = require('debug')('bbs-web')\n\nconst CANVAS_WIDTH = 640\nconst CANVAS_HEIGHT = 528\n\nconst FONT_WIDTH = 8\nconst FONT_HEIGHT = 16\nconst SCREEN_HEIGHT = 33\n\nconst SMART_MOUSE_BORDER = 2\n\nlet WINDOW_TOP = 0\nlet WINDOW_BOTTOM = SCREEN_HEIGHT - 1\n\nconst COLOR = []\nconst FONTS = [\n  { name: '둥근모', value: 'neodgm' },\n  { name: '굵은체', value: 'neoiyg' },\n  { name: '필기체', value: 'neopil' },\n  { name: '굵은달', value: 'neoancient' },\n  { name: '샘물체', value: 'neowater' }\n]\nconst DISPLAYS = ['VGA', 'ACI', 'HERCULES']\n\nlet _io = null\nlet _ctx2d = null\nlet _rate = 1.0\nlet _selectedDisplay = 'VGA'\nlet _selectedFont = 'neodgm'\nlet _escape = null\nlet _cursor = { x: 0, y: 0 }\nlet _cursorStore = { x: 0, y: 0 }\nlet _attr = { textColor: 15, backgroundColor: 1, reversed: false }\nlet _lastPageText = ''\nlet _lastPageTextPos = []\nlet _smartMouse = []\nlet _smartMouseCmd = null\n\nfunction App() {\n  const [connDiag, setConnDiag] = useState(true)\n  const [command, setCommand] = useState('')\n  const [commandType, setCommandType] = useState('text')\n\n  const [applyDiag, setApplyDiag] = useState(false)\n\n  /*\n  const [rzDiag, setRzDiag] = useState(false)\n  const [rzFilename, setRzFilename] = useState(null)\n  const [rzReceived, setRzReceived] = useState(0)\n  const [rzTotal, setRzTotal] = useState(0)\n  const [rzUrl, setRzUrl] = useState(null)\n  */\n\n  const terminalRef = useRef()\n  const smartMouseBoxRef = useRef()\n  const commandRef = useRef()\n\n  const fontSelected = (font) => {\n    _selectedFont = font\n    displayChanged(false)\n  }\n\n  const displaySelected = (display) => {\n    _selectedDisplay = display\n    displayChanged(false)\n  }\n\n  const onResize = () => {\n    rebuildSmartMouse()\n    moveCommandInputPosition()\n  }\n\n  const copyToClipboard = () => {\n    let normalText = ''\n    let esc = false\n\n    for (const ch of _lastPageText) {\n      if (!esc && ch === '\\x1b') {\n        esc = true\n        continue\n      }\n\n      if (esc && '@ABCDFGHJKSfhlmprsu'.indexOf(ch) !== -1) {\n        esc = false\n        continue\n      }\n\n      if (!esc) {\n        normalText += ch\n      }\n    }\n\n    normalText = normalText.replace(/\\x0d\\x00/gi, '')\n\n    if (copy(normalText)) {\n      alert('현재 화면이 클립보드에 복사되었습니다.')\n    } else {\n      alert('클립보드에 복사 중 오류가 발생하였습니다.')\n    }\n  }\n\n  const terminalClicked = () => {\n    commandRef.current.focus()\n  }\n\n  const mouseMove = (clientX, clientY) => {\n    const mouseX = clientX - terminalRef.current.getBoundingClientRect().left\n    const mouseY = clientY - terminalRef.current.getBoundingClientRect().top\n\n    for (const sm of _smartMouse) {\n      if (\n        mouseX >= sm.px.x &&\n        mouseY >= sm.px.y &&\n        mouseX < sm.px.x + sm.px.width &&\n        mouseY < sm.px.y + sm.px.height\n      ) {\n        // Intenally set the smart mouse command\n        _smartMouseCmd = sm.command\n\n        // Mouse smart mouse box to the position\n        smartMouseBoxRef.current.style.left =\n          sm.px.x -\n          SMART_MOUSE_BORDER +\n          terminalRef.current.getBoundingClientRect().left +\n          window.pageXOffset +\n          'px'\n        smartMouseBoxRef.current.style.top =\n          sm.px.y -\n          SMART_MOUSE_BORDER +\n          terminalRef.current.getBoundingClientRect().top +\n          window.pageYOffset +\n          'px'\n        smartMouseBoxRef.current.style.width =\n          sm.px.width + 2 * SMART_MOUSE_BORDER + 'px'\n        smartMouseBoxRef.current.style.height =\n          sm.px.height + 2 * SMART_MOUSE_BORDER + 'px'\n        smartMouseBoxRef.current.style.visibility = 'visible'\n\n        return\n      }\n    }\n\n    // If no smart mouse position has detected, hide the smart mouse box\n    smartMouseBoxRef.current.style.visibility = 'hidden'\n  }\n\n  const smartMouseClicked = () => {\n    if (/https?:\\/\\//.exec(_smartMouseCmd)) {\n      window.open(_smartMouseCmd, '_blank')\n    } else {\n      enterCommand(_smartMouseCmd)\n    }\n\n    smartMouseBoxRef.current.style.visibility = 'hidden'\n    _smartMouseCmd = ''\n\n    terminalClicked()\n  }\n\n  const onKeyUp = (key) => {\n    if (key === 'Enter') {\n      enterCommand(command)\n    }\n  }\n\n  const doubleWidth = (ch) => {\n    return (ch.charCodeAt(0) >= 0x80) && (_ctx2d.measureText(ch).width <= 9)\n  }\n\n  const screenScrollUp = () => {\n    const copy = _ctx2d.getImageData(\n      0,\n      FONT_HEIGHT * (WINDOW_TOP + 1),\n      CANVAS_WIDTH,\n      FONT_HEIGHT * (WINDOW_BOTTOM - WINDOW_TOP)\n    )\n    _ctx2d.putImageData(copy, 0, FONT_HEIGHT * WINDOW_TOP)\n    _ctx2d.fillStyle = COLOR[_attr.backgroundColor]\n    _ctx2d.fillRect(\n      0,\n      WINDOW_BOTTOM * FONT_HEIGHT,\n      CANVAS_WIDTH,\n      FONT_HEIGHT\n    )\n\n    // Modify the position of _lastPageTextPos (scroll up)\n    for (const pos of _lastPageTextPos) {\n      if (pos.y >= WINDOW_TOP && pos.y <= WINDOW_BOTTOM) {\n        pos.y--\n      }\n    }\n  }\n\n  const cr = () => {\n    _cursor.x = 0\n  }\n\n  const lf = () => {\n    _cursor.y++\n    if (_cursor.y > WINDOW_BOTTOM) {\n      _cursor.y = WINDOW_BOTTOM\n      screenScrollUp()\n    }\n  }\n\n  const enterCommand = (command) => {\n    if (command) {\n      _io.emit('data', `${command}\\r\\n`)\n    } else {\n      _io.emit('data', '\\r\\n')\n    }\n    setCommand('')\n  }\n\n  const displayChanged = (isInitial = false) => {\n    for (let i = 0; i < 16; i++) {\n      COLOR[i] = THEMES[_selectedDisplay][i]\n    }\n\n    terminalRef.current.style.fontFamily = _selectedFont\n    commandRef.current.style.fontFamily = _selectedFont\n\n    _ctx2d.font = `normal 16px ${_selectedFont}`\n\n    terminalClicked()\n\n    cookies.set('display', _selectedDisplay, { expires: 365 })\n    cookies.set('font', _selectedFont, { expires: 365 })\n\n    if (!isInitial) {\n      setApplyDiag(true)\n\n      setTimeout(() => {\n        // Clear whole webpage\n      document.getElementsByTagName('body')[0].style.backgroundColor =\n          COLOR[_attr.backgroundColor]\n\n        terminalRef.current.style.backgroundColor =\n          COLOR[_attr.backgroundColor]\n\n        // Rewrite last page text\n        write(_lastPageText)\n        setApplyDiag(false)\n\n        terminalClicked()\n      }, 4000)\n    }\n  }\n\n  const setupTerminal = () => {\n    _selectedDisplay = cookies.get('display') ?? 'VGA'\n    _selectedFont = cookies.get('font') ?? 'neodgm'\n\n    // Value check for the prevent error by the previous value\n    if (!DISPLAYS.includes(_selectedDisplay)) {\n      _selectedDisplay = 'VGA'\n    }\n    if (!FONTS.includes(_selectedFont)) {\n      _selectedFont = 'neodgm'\n    }\n\n    _ctx2d = terminalRef.current.getContext('2d')\n    if (_ctx2d) {\n      _ctx2d.fillStyle = COLOR[_attr.textColor]\n      _ctx2d.font = 'normal 16px ' + _selectedFont\n      _ctx2d.textBaseline = 'top'\n    } else {\n      alert('error: cannot create a canvas context2d!')\n    }\n\n    displayChanged(true)\n  }\n/*\n  const rzClose = () => {\n    setRzDiag(false)\n    write('파일수신이 완료되었습니다. [ENTER]를 눌러주세요.')\n    terminalClicked()\n  }\n*/\n  const onBeforeUnload = () => {\n    _io.disconnect()\n  }\n\n  const setupNetwork = () => {\n    // Need to wait some time for download TTF fonts\n    setTimeout(() => {\n      const host = (process.env.NODE_ENV === 'production')\n        ? 'http://bbs.olddos.kr'\n        : 'localhost:8080'\n\n      debug('Start conecting...')\n      _io = io(host)\n\n      _io.on('connect', () => {\n        debug('Connected')\n        setConnDiag(false)\n        terminalClicked()\n      })\n\n      _io.on('disconnect', () => {\n        debug('Disconnected')\n        write('접속이 종료되었습니다.\\r\\n')\n      })\n\n      _io.on('data', (data) => {\n        // Check if the password input phrase\n        const pattern = /비밀번호 : /\n        const result = pattern.exec(Buffer.from(data).toString())\n        if (result) {\n          setCommandType('password')\n        } else {\n          setCommandType('text')\n        }\n        write(Buffer.from(data).toString())\n      })\n/*\n      _io.on('rz-begin', (filename) => {\n        rzFilename = filename\n        rzDiag = true\n        rzReceived = 0\n        rzTotal = 0\n        setrzdte\n        $nextTick(() => {\n          $refs.rzDiagText.innerText =\n            '파일을 준비중입니다\\n\\n' + rzFilename\n        })\n      })\n\n      _io.on('rz-progress', progress => {\n        // Progress: { received, total, bps }\n        rzReceived = progress.received\n        rzTotal = progress.total\n\n        const percent = ((rzReceived / rzTotal) * 100).toFixed(2)\n        $refs.rzProgress.innerText = '(' + percent + '% / 100%)'\n      })\n\n      _io.on('rz-end', result => {\n        if (result.code === 0) {\n          rzReceived = rzTotal\n\n          $nextTick(() => {\n            $refs.rzDiagText.innerText =\n              '파일이 준비되었습니다\\n\\n' + rzFilename\n            $refs.rzProgress.innerText = '(100% / 100%)'\n            rzUrl = result.url\n          })\n        } else {\n          alert('error: download failure!')\n        }\n      })*/\n    }, 4000)\n  }\n\n  const applyEscape = () => {\n    // Text color\n    {\n      const pattern = /\\[=([0-9]*)F/\n      const result = pattern.exec(_escape)\n      if (result) {\n        const param1 = parseInt(result[1], 10)\n        _attr.textColor = isNaN(param1) ? 15 : param1\n      }\n    }\n    // Background color\n    {\n      const pattern = /\\[=([0-9]*)G/\n      const result = pattern.exec(_escape)\n      if (result) {\n        const param1 = parseInt(result[1], 10)\n        _attr.backgroundColor = isNaN(param1) ? 1 : param1\n      }\n    }\n    // Reverse color\n    {\n      const pattern = /\\[([0-9]*)m/\n      const result = pattern.exec(_escape)\n      if (result) {\n        const param1 = parseInt(result[1], 10)\n        if (!isNaN(param1)) {\n          if (param1 === 7) {\n            _attr.reversed = true\n          } else {\n            _attr.reversed = false\n          }\n        } else {\n          _attr.reversed = false\n        }\n      }\n    }\n    // Cursor position set\n    {\n      // Move _cursor to specific position\n      {\n        const pattern = /\\[([0-9]*);([0-9]*)H/\n        const result = pattern.exec(_escape)\n        if (result) {\n          const param1 = parseInt(result[1], 10)\n          const param2 = parseInt(result[2], 10)\n\n          _cursor.y = isNaN(param1) ? 0 : param1 - 1\n          _cursor.x = isNaN(param2) ? 0 : param2 - 1\n        } else {\n          const pattern = /\\[([0-9]*)H/\n          const result = pattern.exec(_escape)\n          if (result) {\n            const param1 = parseInt(result[1], 10)\n            _cursor.y = isNaN(param1) ? 0 : param1 - 1\n            _cursor.x = 0\n          }\n        }\n      }\n      // Move _cursor y\n      {\n        const pattern = /\\[([0-9]*)A/\n        const result = pattern.exec(_escape)\n        if (result) {\n          const param1 = parseInt(result[1], 10)\n          _cursor.y -= isNaN(param1) ? 0 : param1\n          if (_cursor.y < 0) {\n            _cursor.y = 0\n            _cursor.x = 0\n          }\n        }\n      }\n      // Move _cursor x\n      {\n        const pattern = /\\[([0-9]*)C/\n        const result = pattern.exec(_escape)\n        if (result) {\n          const param1 = parseInt(result[1], 10)\n          _cursor.x = isNaN(param1) ? 0 : param1 - 1\n        }\n      }\n      // Store and restore the _cursor position\n      {\n        if (_escape === '[s') {\n          _cursorStore = { x: _cursor.x, y: _cursor.y }\n        } else if (_escape === '[u') {\n          _cursor = { x: _cursorStore.x, y: _cursorStore.y }\n        }\n      }\n    }\n    // Clear the screen\n    {\n      if (_escape === '\\x1b[2J') {\n        _ctx2d.fillStyle = COLOR[_attr.backgroundColor]\n        _ctx2d.fillRect(\n          0,\n          0,\n          terminalRef.current.width,\n          terminalRef.current.height\n        )\n\n        // Clear whole webpage\n        document.getElementsByTagName('body')[0].style.backgroundColor =\n          COLOR[_attr.backgroundColor]\n\n        // Refresh _lastPageText (after 2J, there is no any other text)\n        _lastPageText = '\\x1b[2J'\n        _lastPageTextPos = [\n          { x: 0, y: 0 },\n          { x: 0, y: 0 },\n          { x: 0, y: 0 },\n          { x: 0, y: 0 }\n        ]\n        _cursor.x = 0\n        _cursor.y = 0\n      }\n    }\n    // Clear a line\n    {\n      if (_escape.endsWith('[2K')) {\n        _ctx2d.fillStyle = COLOR[_attr.backgroundColor]\n        _ctx2d.fillRect(\n          0,\n          _cursor.y * FONT_HEIGHT,\n          terminalRef.current.clientWidth,\n          FONT_HEIGHT\n        )\n      } else if (_escape.endsWith('[1K')) {\n        _ctx2d.fillStyle = COLOR[_attr.backgroundColor]\n        _ctx2d.fillRect(\n          0,\n          _cursor.y * FONT_HEIGHT,\n          (_cursor.x + 1) * FONT_WIDTH,\n          FONT_HEIGHT\n        )\n      } else if (_escape.endsWith('[0K') || _escape.endsWith('[K')) {\n        _ctx2d.fillStyle = COLOR[_attr.backgroundColor]\n        _ctx2d.fillRect(\n          _cursor.x * FONT_WIDTH,\n          _cursor.y * FONT_HEIGHT,\n          terminalRef.current.clientWidth - _cursor.x * FONT_WIDTH,\n          FONT_HEIGHT\n        )\n      }\n    }\n    // Set the window area\n    {\n      const pattern = /\\[([0-9]*);([0-9]*)r/\n      const result = pattern.exec(_escape)\n      if (result) {\n        const param1 = parseInt(result[1], 10)\n        const param2 = parseInt(result[2], 10)\n        const scrollFrom = isNaN(param1) ? 0 : param1 - 1\n        const scrollTo = isNaN(param2) ? 0 : param2 - 1\n\n        // Reset the window height\n        if (scrollFrom <= 0 && scrollTo <= 0) {\n          WINDOW_TOP = 0\n          WINDOW_BOTTOM = SCREEN_HEIGHT - 1\n        } else {\n          WINDOW_TOP = scrollFrom\n          WINDOW_BOTTOM = scrollTo\n        }\n      }\n    }\n  }\n\n  const endOfEscape = () => {\n    if (!_escape) {\n      return false\n    }\n    const lastChar = _escape.charAt(_escape.length - 1)\n    if ('@ABCDFGHJKSfhlmprsu'.indexOf(lastChar) !== -1) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  const rebuildSmartMouse = () => {\n    _smartMouse = []\n    smartMouseBoxRef.current.style.visibility = 'hidden'\n\n    const smartMousePatterns = [\n      /([0-9]+)\\.\\s[ㄱ-힣a-z/\\s]+/gi, // 99. xx\n      /\\[([0-9]+)\\]\\s[ㄱ-힣a-z/\\s]+/gi, // [99].xx\n      /\\(([a-z]+),/gi, // (x,\n      /,([a-z]+),/gi, // ,x,\n      /,([a-z]+)\\)/gi, // ,x)\n      /\\(([a-z]+)\\)/gi, // (x)\n      /\\[([a-z0-9]+)\\]/gi, // [x]\n      /(https?:\\/\\/[a-z0-9-\\.\\/?&_=#]+)/gi, // URL\n      /([0-9]+) +.+ +[0-9-]+ +[0-9]+ + [0-9]+ +.*/gi, // Article\n      /([0-9]+) +[0-9\\.]+ .*/gi, // News (JTBC)\n      /([0-9]+) +.+ +[0-9-]+ .*/gi, // News (Oh my news, IT news)\n      /([0-9]+) +(JTBC|오마이뉴스|전자신문|속보|정치|연예|전체기사|주요기사|사회|오늘의 뉴스|게임)/gi // News Titles\n    ]\n\n    for (const pattern of smartMousePatterns) {\n      var result = null\n      while ((result = pattern.exec(_lastPageText))) {\n        // Remove ANSI _escape code from the string(result[0])\n        result[0] = result[0].replace(/\\x1b\\[=.{1,3}[FG]{1}/gi, '').trim()\n\n        // If there is doubleWidthCharacter, replace it to '가' for correct measuring\n        var normalText = ''\n        for (const ch of result[0]) {\n          if (doubleWidth(ch)) {\n            normalText += '가'\n          } else {\n            normalText += ch\n          }\n        }\n\n        const link = {\n          command: result[1],\n          px: {\n            x: (_lastPageTextPos[result.index].x * FONT_WIDTH) * _rate,\n            y: (_lastPageTextPos[result.index].y * FONT_HEIGHT) * _rate,\n            width: _ctx2d.measureText(normalText).width * _rate,\n            height: FONT_HEIGHT * _rate\n          }\n        }\n        _smartMouse.push(link)\n      }\n    }\n  }\n\n  const moveCommandInputPosition = () => {\n    const bcr = terminalRef.current.getBoundingClientRect()\n\n    _rate = bcr.width / CANVAS_WIDTH\n    const scaledCursorX = (_cursor.x * FONT_WIDTH) * _rate\n    const scaledCursorY = (_cursor.y * FONT_HEIGHT) * _rate\n\n    const tmLeft = bcr.left + window.pageXOffset\n    const tmTop = bcr.top + window.pageYOffset\n    const tmWidth = bcr.width\n\n    const cmLeft = tmLeft + scaledCursorX\n    const cmTop = tmTop + scaledCursorY - ((20 - (16 * _rate)) / 2)\n    const cmWidth = tmWidth - (cmLeft - tmLeft)\n\n    commandRef.current.style.left = `${cmLeft}px`\n    commandRef.current.style.top = `${cmTop}px`\n    commandRef.current.style.width = `${cmWidth}px`\n\n    commandRef.current.style.fontSize = `${16 * _rate}px`\n    commandRef.current.style.height = '20px'\n  }\n\n  const write = (text) => {\n    for (const ch of text) {\n      _lastPageText += ch\n      _lastPageTextPos.push({ x: _cursor.x, y: _cursor.y })\n      if (_escape) {\n        _escape = _escape + ch\n        if (endOfEscape()) {\n          applyEscape()\n          _escape = null\n        }\n      } else {\n        switch (ch.charCodeAt(0)) {\n          case 27:\n            _escape = '\\x1b'\n            break\n\n          case 13:\n            cr()\n            break\n\n          case 10:\n            lf()\n            break\n\n          case 0: // NULL\n          case 24: // ZDLE\n          case 17: // XON\n          case 138: // LF of sz\n          case 65533: // Unknown\n            break\n\n          default:\n            {\n              const charWidth = ch.charCodeAt(0) < 0x80 ? 1 : 2\n              const cursor_px = {\n                x: _cursor.x * FONT_WIDTH,\n                y: _cursor.y * FONT_HEIGHT\n              }\n              let textColor = COLOR[_attr.textColor]\n              let backgroundColor = COLOR[_attr.backgroundColor]\n\n              if (doubleWidth(ch)) {\n                _ctx2d.save()\n                _ctx2d.scale(2, 1)\n                cursor_px.x /= 2\n              }\n\n              if (_attr.reversed) {\n                textColor = COLOR[_attr.backgroundColor]\n                backgroundColor = COLOR[_attr.textColor]\n              }\n\n              _ctx2d.fillStyle = backgroundColor\n              _ctx2d.fillRect(\n                cursor_px.x,\n                cursor_px.y,\n                charWidth * FONT_WIDTH,\n                FONT_HEIGHT\n              )\n              _ctx2d.fillStyle = textColor\n              _ctx2d.fillText(ch, cursor_px.x, cursor_px.y)\n\n              if (doubleWidth(ch)) {\n                _ctx2d.restore()\n              }\n\n              _cursor.x += charWidth\n            }\n            break\n        }\n      }\n    }\n\n    // Rebuild smart mouse\n    rebuildSmartMouse()\n\n    // Move the command textfield to the _cursor position\n    moveCommandInputPosition()\n  }\n\n  useEffect(() => {\n    debug('Setup')\n\n    setupTerminal()\n    setupNetwork()\n    window.addEventListener('resize', onResize)\n    window.addEventListener('beforeunload', onBeforeUnload)\n\n    return (() => {\n      window.removeEventListener('resize', this.onResize)\n      window.removeEventListener('beforeunload', this.onBeforeUnload)\n    })\n  }, [])\n\n  return (\n    <div>\n      <Navbar bg='primary' variant='dark'>\n        <img src='/logo.png' className='mr-2' width='24px' height='24px' />\n        <Navbar.Brand>\n          <span style={{ color: 'yellow' }}>도</span>\n          <span style={{ color: 'white' }}>/</span>\n          <span style={{ color: 'red' }}>스</span>\n          <span style={{ color: 'white' }}>/</span>\n          <span style={{ color: 'cyan' }}>박</span>\n          <span style={{ color: 'white' }}>/</span>\n          <span style={{ color: 'lightgreen' }}>물</span>\n          <span style={{ color: 'white' }}>/</span>\n          <span style={{ color: 'yellow' }}>관</span>\n        </Navbar.Brand>\n        <Nav onSelect={(selectedKey) => fontSelected(selectedKey)}>\n          <NavDropdown title='글꼴'>\n            {FONTS.map((font) => (\n              <NavDropdown.Item key={font.value} eventKey={font.value}>{font.name}</NavDropdown.Item>\n            ))}\n          </NavDropdown>\n        </Nav>\n        <Nav\n          onSelect={(selectedKey) => displaySelected(selectedKey)}\n        >\n          <NavDropdown title='색상'>\n            {DISPLAYS.map((display) => (\n              <NavDropdown.Item key={display} eventKey={display}>{display}</NavDropdown.Item>\n            ))}\n          </NavDropdown>\n        </Nav>\n        <Button onClick={() => copyToClipboard()}>갈무리</Button>\n      </Navbar>\n      <div class='text-center mt-3'>\n        <canvas\n          ref={terminalRef}\n          width={CANVAS_WIDTH}\n          height={CANVAS_HEIGHT}\n          className='w-100'\n          style={{ maxWidth: '700px' }}\n          onClick={() => terminalClicked()}\n          onMouseMove={(event) => mouseMove(event.clientX, event.clientY)}\n        ></canvas>\n        <div\n          ref={smartMouseBoxRef}\n          className='smart-mouse-box'\n          onClick={() => smartMouseClicked()}\n        ></div>\n        <input\n          ref={commandRef}\n          type={commandType}\n          className='command'\n          value={command}\n          onChange={(event) => setCommand(event.target.value)}\n          onKeyUp={(event) => onKeyUp(event.key)}\n        />\n      </div>\n      <div className='text-center mt-3'>\n        <a href='mailto:gcjjyy@gmail.com'>© 2019 gcjjyy@gmail.com</a>\n      </div>\n      <LoadingModal show={connDiag} message='접속 중입니다..'/>\n      <LoadingModal show={applyDiag} message='적용 중입니다..'/>\n    </div>\n  )\n}\n\nexport default App\n","/Users/gcjjyy/workspace/bbs-web/frontend/src/index.js",[],"/Users/gcjjyy/workspace/bbs-web/frontend/src/LoadingModal.js",[],{"ruleId":"34","severity":1,"message":"35","line":102,"column":37,"nodeType":"36","messageId":"37","endLine":102,"endColumn":49},{"ruleId":"38","severity":1,"message":"39","line":401,"column":5,"nodeType":"40","messageId":"41","endLine":452,"endColumn":6},{"ruleId":"38","severity":1,"message":"39","line":445,"column":7,"nodeType":"40","messageId":"41","endLine":451,"endColumn":8},{"ruleId":"38","severity":1,"message":"39","line":454,"column":5,"nodeType":"40","messageId":"41","endLine":479,"endColumn":6},{"ruleId":"38","severity":1,"message":"39","line":481,"column":5,"nodeType":"40","messageId":"41","endLine":507,"endColumn":6},{"ruleId":"42","severity":1,"message":"43","line":554,"column":28,"nodeType":"36","messageId":"44","endLine":554,"endColumn":29,"suggestions":"45"},{"ruleId":"42","severity":1,"message":"46","line":554,"column":30,"nodeType":"36","messageId":"44","endLine":554,"endColumn":31,"suggestions":"47"},{"ruleId":"42","severity":1,"message":"43","line":556,"column":22,"nodeType":"36","messageId":"44","endLine":556,"endColumn":23,"suggestions":"48"},{"ruleId":"34","severity":1,"message":"49","line":565,"column":39,"nodeType":"36","messageId":"37","endLine":565,"endColumn":63},{"ruleId":"50","severity":1,"message":"51","line":706,"column":6,"nodeType":"52","endLine":706,"endColumn":8,"suggestions":"53"},{"ruleId":"54","severity":1,"message":"55","line":711,"column":9,"nodeType":"56","endLine":711,"endColumn":76},"no-control-regex","Unexpected control character(s) in regular expression: \\x0d, \\x00.","Literal","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-useless-escape","Unnecessary escape character: \\..","unnecessaryEscape",["57","58"],"Unnecessary escape character: \\/.",["59","60"],["61","62"],"Unexpected control character(s) in regular expression: \\x1b.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onResize', 'setupNetwork', and 'setupTerminal'. Either include them or remove the dependency array.","ArrayExpression",["63"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"messageId":"64","fix":"65","desc":"66"},{"messageId":"67","fix":"68","desc":"69"},{"messageId":"64","fix":"70","desc":"66"},{"messageId":"67","fix":"71","desc":"69"},{"messageId":"64","fix":"72","desc":"66"},{"messageId":"67","fix":"73","desc":"69"},{"desc":"74","fix":"75"},"removeEscape",{"range":"76","text":"77"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"78","text":"79"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"80","text":"77"},{"range":"81","text":"79"},{"range":"82","text":"77"},{"range":"83","text":"79"},"Update the dependencies array to be: [onResize, setupNetwork, setupTerminal]",{"range":"84","text":"85"},[14443,14444],"",[14443,14443],"\\",[14445,14446],[14445,14445],[14553,14554],[14553,14553],[18832,18834],"[onResize, setupNetwork, setupTerminal]"]